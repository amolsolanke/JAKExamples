package com.in.JavaAmol;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import de.micromata.opengis.kml.v_2_2_0.Boundary;
import de.micromata.opengis.kml.v_2_2_0.Document;
import de.micromata.opengis.kml.v_2_2_0.Feature;
import de.micromata.opengis.kml.v_2_2_0.Folder;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LinearRing;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.PolyStyle;
import de.micromata.opengis.kml.v_2_2_0.Polygon;
import de.micromata.opengis.kml.v_2_2_0.Style;

public class DrawCircleInKmlWithJAK implements Serializable {

	final String LATITUDE = "Latitude";
	final String LONGITUDE = "Longitude";

	public String createKmlFileForUbrTool(String docName,
			String folderName, String destFilePath, Double longitude,
			Double latitude, Double meters, int segment, Double offset)
					throws Exception {

		try {
			Document doc = null;
			final Kml kml =new Kml();

			doc = kml.createAndSetDocument().withName(docName).withOpen(true);

			final Style style = doc.createAndAddStyle().withId("polyCircleStyle");

			final PolyStyle polyStyle = style.createAndSetPolyStyle();
			polyStyle.withColor("808181f7"); // aabbggrr (aa - opacity, bb - blue, gg - green, rr - red)

			Folder folder = doc.createAndAddFolder().withName(folderName).withOpen(true);
			folder.addToFeature(createCircle(longitude, latitude, meters, segment, offset));
			File kmlFile = new File(destFilePath);
			kml.marshal(kmlFile);
			return kmlFile.getAbsolutePath();
		} catch(Exception e) {
			e.printStackTrace();
			throw new Exception("File creation failed : "+e.getMessage());
		}
	}


	private Feature createCircle(Double longitude, Double latitude,
			Double meters, int segment, Double offset) {

		Placemark placemark = new Placemark().withOpen(Boolean.TRUE)
				.withStyleUrl("#polyCircleStyle");

		Polygon polygon = placemark.createAndSetPolygon();
		Boundary boundary = polygon.createAndSetOuterBoundaryIs();
		LinearRing linearRing = new LinearRing();

		List<LinkedHashMap<String, Double>> pts = findCoOrdinates(longitude,latitude,meters,segment,offset);
		int len = pts.size();
		for(int i=0;i<len;i++){
			linearRing.addToCoordinates(pts.get(i).get(LONGITUDE), pts.get(i).get(LATITUDE));

		}
		boundary.withLinearRing(linearRing);
		return placemark;
	}


	private List<LinkedHashMap<String, Double>> findCoOrdinates(Double longitude,
			Double latitude, Double meters, int segment, Double offset) {
		//constant to convert to radians
		final Double RAD = Math.PI/180.0;
		//mean radius of earth in meters
		final Double MR = 6378.1 * 1000.0;
		Double offsetRadians = offset * RAD;
		// compute long degrees in rad at a given lat
		Double r = (meters/(MR * Math.cos(latitude * RAD)));
		LinkedHashMap<String, Double> vec = toCart(longitude*RAD, latitude* RAD);
		LinkedHashMap<String, Double> pt = toCart(longitude*RAD + r, latitude*RAD);
		List<LinkedHashMap<String, Double>> pts = new ArrayList<LinkedHashMap<String,Double>>();
		for(int i=0;i<=segment;i++){

			pts.add(toEarth(rotPoint(vec,pt,offsetRadians + (2.0 * Math.PI/segment)*i)));
		}
		//add another point to connect back to start
		pts.add(pts.get(0));
		return pts;
	}

	private LinkedHashMap<String, Double> toEarth(LinkedHashMap<String, Double> rotPoint) {
		Double longitude, latitude, DEG, colatitude;
		if (rotPoint.get("x") == 0) {
			longitude = Math.PI / 2.0;
		} else {
			longitude = Math.atan(rotPoint.get("y") / rotPoint.get("x"));
		}
		colatitude = Math.acos(rotPoint.get("z"));
		latitude = (Math.PI / 2.0 - colatitude);
		if (rotPoint.get("x") < 0.0) {
			if (rotPoint.get("y") <= 0.0) {
				longitude = -(Math.PI - longitude);
			} else {
				longitude = Math.PI + longitude;
			}
		}
		DEG = 180.0 / Math.PI;
		LinkedHashMap<String, Double> map = new LinkedHashMap<String, Double>();
		map.put(LATITUDE, latitude * DEG);
		map.put(LONGITUDE, longitude * DEG);
		return map;
	}

	private LinkedHashMap<String, Double> rotPoint(LinkedHashMap<String, Double> vec,
			LinkedHashMap<String, Double> pt, double phi) {
		//remap vector for clarity
		Double u, v, w, x, y,z;
		u=vec.get("x");
		v=vec.get("y");
		w=vec.get("z");
		x=pt.get("x");
		y=pt.get("y");
		z=pt.get("z");
		Double a, d,e;
		a=u*x + v*y + w*z;
		d = Math.cos(phi);
		e=Math.sin(phi);
		LinkedHashMap<String, Double> map = new LinkedHashMap<String, Double>();
		map.put("x", (a*u + (x-a*u)*d+ (v*z-w*y)*e));
		map.put("y", (a*v + (y - a*v)*d + (w*x - u*z) * e));
		map.put("z", (a*w + (z - a*w)*d + (u*y - v*x) * e));
		return map;
	}


	private LinkedHashMap<String, Double> toCart(double longitude, double latitude) {
		Double theta = longitude;
		Double phi = Math.PI/2.0 - latitude;
		// spherical coordinate use "co-latitude", not "lattitude"
		// latitude = [-90, 90] with 0 at equator
		// co-latitude = [0, 180] with 0 at north pole
		LinkedHashMap<String, Double> map = new LinkedHashMap<String, Double>();
		map.put("x", Math.cos(theta)*Math.sin(phi));
		map.put("y", Math.sin(theta)*Math.sin(phi));
		map.put("z", Math.cos(phi));
		return map;
	}

	public static void main(String a[]) {
		DrawCircleInKmlWithJAK kmlCircle= new DrawCircleInKmlWithJAK();
		try {

			String docName ="Kml Circle Map";
			String folderName = "Kml Circle Folder";
			String destFilePath = "test.kml";
			String response = kmlCircle.createKmlFileForUbrTool(docName, folderName, destFilePath, 72.8258,18.975,5000.0,360,0.0);
			System.out.println("File created at : "+response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
